---
import type { MarkdownHeading } from 'astro';
import { cva } from 'class-variance-authority';

const Link = cva(
  'border-l-2 border-l-indigo-500 pl-3 hover:bg-indigo-300 hover:cursor-pointer hover:bg-opacity-60 py-2 flex',
  {
    variants: {
      active: {
        true: 'bg-indigo-300 bg-opacity-60',
        false: '',
      },
    },
  },
);

export interface Props {
  headings: MarkdownHeading[];
  // frontmatter: Frontmatter;
}
---

<div class='flex flex-col gap-3 w-full'>
  <h1 class='text-lg text-white font-bold'>On this page</h1>
  <ul class='flex flex-col'>
    {
      Astro.props.headings.map((heading) => {
        if (heading.text === undefined) return null;
        return (
          <li>
            <a href={`#${heading.slug}`} class={Link({ active: false })}>
              <span class='text-stone-50 text-base font-regular '>
                {heading.text}
              </span>
            </a>
          </li>
        );
      })
    }
  </ul>
</div>

<script is:inline>
  document.querySelectorAll('article :is(h1,h2,h3)').forEach((h) => {
    new IntersectionObserver(
      (items) => {
        items.forEach((item) => {
          const id = item.target.id;

          // have to do "All" here cause we render this component in pageContent for mobile too
          const tocItem = Array.from(
            document.querySelectorAll(`a[href="#${id}"]`),
          ).at(-1);

          if (!tocItem) return;

          if (item.isIntersecting) {
            // get current all active elements
            const currentActiveElements = Array.from(
              document.querySelectorAll(
                `[data-current-active-tab-content-item="true"]`,
              ),
            );

            // get current all parent active elements
            const currentActiveParentElements = Array.from(
              document.querySelectorAll(
                `[data-current-active-parent-tab-content-item="true"]`,
              ),
            );

            if (currentActiveElements.length) {
              // loop through all elements and remove class and attr
              for (const el of currentActiveElements) {
                el.classList.remove(
                  'font-medium',
                  'text-indigo-700',
                  'dark:text-indigo-100',
                  'bg-opacity-60',
                );
                el.removeAttribute('data-current-active-tab-content-item');
              }
            }
            // if has active parent elements
            if (currentActiveParentElements.length) {
              // loop through all parent elements and remove class and attr
              for (const parentEl of currentActiveParentElements) {
                parentEl.classList.remove(
                  'border-bg-indigo-300',
                  'dark:bg-indigo-300',
                  'bg-indigo-300',
                  'bg-opacity-60',
                );
                parentEl.removeAttribute(
                  'data-current-active-parent-tab-content-item',
                );
              }
            }

            tocItem.classList.add(
              'font-medium',
              'text-indigo-700',
              'dark:text-indigo-100',
              'bg-opacity-60',
            );
            tocItem.parentElement.classList.add(
              'border-bg-indigo-300',
              'dark:bg-indigo-300',
              'bg-indigo-300',
              'bg-opacity-60',
            );
            // set data attr to active element also will helpful when need to remove active state
            tocItem.setAttribute('data-current-active-tab-content-item', true);
            tocItem.parentElement.setAttribute(
              'data-current-active-parent-tab-content-item',
              true,
            );
          }
        });
      },
      {
        rootMargin: '-100px 0% -66%',
        threshold: 1,
      },
    ).observe(h);
  });
</script>
